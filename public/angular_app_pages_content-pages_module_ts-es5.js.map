{"version":3,"sources":["webpack:///angular/app/pages/content-pages-routing.module.ts","webpack:///angular/app/pages/content-pages.module.ts","webpack:///angular/app/pages/error/error-page.component.ts","webpack:///angular/app/pages/error/error-page.component.html","webpack:///angular/app/pages/signin/signin.component.html","webpack:///angular/app/pages/signin/signin.component.ts","webpack:///angular/app/pages/signup/signup.component.html","webpack:///angular/app/pages/signup/signup.component.ts","webpack:///angular/app/shared/services/auth-state.service.ts"],"names":["routes","path","children","component","ErrorPageComponent","data","title","SigninComponent","SignupComponent","ContentPagesRoutingModule","RouterModule","ContentPagesModule","CommonModule","FormsModule","ReactiveFormsModule","NgbModule","NgxSpinnerModule","router","authService","spinner","token","authState","route","loginFormSubmitted","isLoginFailed","loginForm","FormGroup","username","FormControl","Validators","password","rememberMe","controls","invalid","show","undefined","type","size","bdColor","color","fullScreen","signinUser","value","subscribe","result","responseHandler","error","console","log","hide","setAuthState","reset","navigate","handleData","access_token","onSubmit","fb","errors","registerForm","group","name","email","password_confirmation","signupUser","AuthStateService","userState","BehaviorSubject","isLoggedIn","userAuthState","asObservable","next"],"mappings":"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","file":"angular_app_pages_content-pages_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ErrorPageComponent } from \"./error/error-page.component\";\r\nimport {SigninComponent } from \"./signin/signin.component\";\r\nimport {SignupComponent } from \"./signup/signup.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'error',\r\n        component: ErrorPageComponent,\r\n        data: {\r\n          title: 'Error Page'\r\n        }\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: SigninComponent,\r\n        data: {\r\n          title: 'Login Page'\r\n        }\r\n      },\r\n      {\r\n        path: 'signup',\r\n        component: SignupComponent,\r\n        data: {\r\n          title: 'Signup Page'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ContentPagesRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\nimport { ContentPagesRoutingModule } from \"./content-pages-routing.module\";\r\n\r\nimport { ErrorPageComponent } from \"./error/error-page.component\";\r\nimport { SigninComponent } from \"./signin/signin.component\";\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ContentPagesRoutingModule,\r\n        FormsModule ,\r\n        ReactiveFormsModule,\r\n        NgbModule,\r\n        NgxSpinnerModule\r\n    ],\r\n    declarations: [\r\n        ErrorPageComponent,\r\n        SigninComponent,\r\n        SignupComponent,\r\n    ]\r\n})\r\nexport class ContentPagesModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-error-page',\r\n    templateUrl: './error-page.component.html',\r\n    styleUrls: ['./error-page.component.scss']\r\n})\r\n\r\nexport class ErrorPageComponent {\r\n\r\n}","<!--Error page starts-->\r\n<section id=\"error\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row auth-height full-height-vh\">\r\n      <div class=\"col-12 d-flex align-items-center justify-content-center\">\r\n        <div class=\"row\">\r\n          <div class=\"col-12 text-center\">\r\n            <img src=\"assets/img/gallery/error.png\" alt=\"\" class=\"img-fluid error-img mt-2\" height=\"300\" width=\"400\">\r\n            <h1 class=\"mt-4\">404 - Page Not Found!</h1>\r\n            <div class=\"w-75 error-text mx-auto mt-4\">\r\n              <p>The page you are looking for might have beel removed, had it's name changed, or is temporarily unavailable.</p>\r\n            </div>\r\n            <a [routerLink]=\"['/']\" class=\"btn btn-warning my-2\">Back To Home</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<!--Error page ends-->\r\n","<!--Login Page Starts-->\n<section id=\"login\">\n    <div class=\"row auth-height full-height-vh m-0\">\n      <div class=\"col-12 d-flex align-items-center justify-content-center\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"card-content\">\n            <div class=\"card-body auth-img\">\n              <div class=\"row m-0\">\n                <div class=\"col-lg-6 d-none d-lg-flex justify-content-center align-items-center auth-img-bg p-3\">\n                  <img src=\"assets/img/gallery/login.png\" alt=\"\" class=\"img-fluid\" width=\"300\" height=\"230\">\n                </div>\n                <div class=\"col-lg-6 col-12 px-4 py-3\">\n                  <h4 class=\"mb-2 card-title\">Login</h4>\n                  <p>Welcome back, please login to your account.</p>\n                  <ngb-alert type=\"light-danger\" class=\"mb-2\" *ngIf=\"isLoginFailed\" (close)=\"isLoginFailed = false\">\n                    <p class=\"mb-0\">Login failed!</p>\n                  </ngb-alert>\n                  <form [formGroup]=\"loginForm\">\n                    <div class=\"form-group\">\n                      <input type=\"text\" formControlName=\"username\" class=\"form-control\" placeholder=\"Username\"\n                        [ngClass]=\"{ 'is-invalid': loginFormSubmitted && lf.username.invalid, 'is-valid': loginFormSubmitted && !lf.username.invalid }\"\n                        required>\n                      <div *ngIf=\"loginFormSubmitted && (lf.username.invalid || lf.username.errors?.required)\"\n                        class=\"help-block mt-1 text-danger\"> <i class=\"ft-alert-circle align-middle\"></i> This is\n                        required</div>\n                    </div>\n                    <div class=\"form-group\">\n                      <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Old Password\"\n                        [ngClass]=\"{ 'is-invalid': loginFormSubmitted && lf.password.invalid, 'is-valid': loginFormSubmitted && !lf.password.invalid }\"\n                        required>\n                      <div *ngIf=\"loginFormSubmitted && (lf.password.invalid || lf.password.errors?.required)\"\n                        class=\"help-block mt-1 text-danger\"> <i class=\"ft-alert-circle align-middle\"></i> This is required\n                      </div>\n                    </div>\n                    <div class=\"d-sm-flex justify-content-between mb-3 font-small-2\">\n                      <div class=\"remember-me mb-2 mb-sm-0\">\n                        <div class=\"checkbox auth-checkbox\">\n                          <input type=\"checkbox\" formControlName=\"rememberMe\" class=\"form-control\" id=\"rememberMe\">\n                          <label for=\"rememberMe\"><span class=\"font-small-2 mb-3 font-weight-normal\">Remember Me</span></label>\n                        </div>\n                      </div>\n                      <!-- <a href=\"javascript:;\">Forgot Password?</a> -->\n                    </div>\n                    <div class=\"d-flex justify-content-between flex-sm-row flex-column\">\n                      <!-- <a href=\"javascript:;\" class=\"btn bg-light-primary mb-2 mb-sm-0\">Register</a> -->\n                      <a  class=\"btn btn-primary\" (click)=\"onSubmit()\">Login</a>\n                    </div>\n                  </form>\n                  <hr>\n                  <!-- <div class=\"d-flex justify-content-between align-items-center\">\n                    <h6 class=\"text-primary m-0\">Or Login With</h6> -->\n                    <ngx-spinner></ngx-spinner>\n                    <!-- <div class=\"login-options\">\n                      <a class=\"btn btn-sm btn-social-icon btn-facebook mr-1\"><span class=\"fa fa-facebook\"></span></a>\n                      <a class=\"btn btn-sm btn-social-icon btn-twitter mr-1\"><span class=\"fa fa-twitter\"></span></a>\n                    </div>\n                  </div> -->\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n  <!--Login Page Ends-->\n  ","import { Component, ViewChild } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { AuthService } from './../../shared/auth/auth.service';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { TokenService } from '../../shared/services/token.service';\nimport { AuthStateService } from '../../shared/services/auth-state.service';\n\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\n\nexport class SigninComponent {\n\n  loginFormSubmitted = false;\n  isLoginFailed = false;\n\n  loginForm = new FormGroup({\n    username: new FormControl([Validators.required]),\n    password: new FormControl([Validators.required]),\n    rememberMe: new FormControl(true)\n  });\n\n\n  constructor(private router: Router, private authService: AuthService,\n    private spinner: NgxSpinnerService,\n    private token: TokenService,\n    private authState: AuthStateService,\n    private route: ActivatedRoute) {\n  }\n\n  get lf() {\n    return this.loginForm.controls;\n  }\n\n  // On submit button click\n  onSubmit() {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.spinner.show(undefined,\n      {\n        type: 'ball-triangle-path',\n        size: 'medium',\n        bdColor: 'rgba(0, 0, 0, 0.8)',\n        color: '#fff',\n        fullScreen: true\n      });\n\n    this.authService.signinUser(this.loginForm.value.username, this.loginForm.value.password).subscribe(\n      result => {\n        this.responseHandler(result);\n      },\n      error => {\n        console.log('error: ' + error)\n        this.isLoginFailed = true;\n        this.spinner.hide();\n     },() => {\n        this.spinner.hide();\n        this.authState.setAuthState(true);\n        this.loginForm.reset()\n        this.router.navigate(['app/page']);\n      }\n    );\n  }\n  // Handle response\n  responseHandler(data){\n    this.token.handleData(data.access_token);\n  }\n\n}\n","<div class=\"auth-wrapper\">\n    <form class=\"form-signin\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <h3 class=\"h3 mb-3 font-weight-normal text-center\">Register User</h3>\n  \n        <!-- Errors -->\n        <div *ngIf=\"errors?.name\" class=\"alert alert-danger mt-3\">\n          {{ errors?.name }}\n        </div>\n        <div *ngIf=\"errors?.email\" class=\"alert alert-danger mt-3\">\n          {{ errors?.email }}\n        </div>\n        <div *ngIf=\"errors?.password\" class=\"alert alert-danger mt-3\">\n            {{ errors?.password }}\n        </div>\n        <div *ngIf=\"errors?.password_confirmation\" class=\"alert alert-danger mt-3\">\n            {{ errors?.password_confirmation }}\n        </div>\n  \n        <!-- Signup form -->\n        <div class=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n        </div>\n        <div class=\"form-group\">\n            <label>Email address</label>\n            <input type=\"email\" class=\"form-control\" formControlName=\"email\">\n        </div>\n        <div class=\"form-group\">\n            <label>Password</label>\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n        </div>\n        <div class=\"form-group\">\n          <label>Confirm Password</label>\n          <input type=\"password\" class=\"form-control\" formControlName=\"password_confirmation\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-block btn-primary\">Register User</button>\n    </form>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './../../shared/auth/auth.service';\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  registerForm: FormGroup;\n  errors = null;\n\n  constructor(\n    public router: Router,\n    public fb: FormBuilder,\n    public authService: AuthService\n  ) {\n    this.registerForm = this.fb.group({\n      name: [''],\n      email: [''],\n      password: [''],\n      password_confirmation: ['']\n    })\n  }\n\n  ngOnInit() { }\n\n  onSubmit() {\n    this.authService.signupUser(this.registerForm.value).subscribe(\n      result => {\n        console.log(result)\n      },\n      error => {\n        this.errors = error.error;\n      },\n      () => {\n        this.registerForm.reset()\n        this.router.navigate(['login']);\n      }\n    )\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { TokenService } from './token.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthStateService {\n\n  private userState = new BehaviorSubject<boolean>(this.token.isLoggedIn());\n  userAuthState = this.userState.asObservable();\n\n  constructor(\n    public token: TokenService\n  ) { }\n\n  setAuthState(value: boolean) {\n    this.userState.next(value);\n  }\n  \n}"]}